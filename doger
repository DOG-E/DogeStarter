#!/bin/bash
# @DogeUserBot - < https://t.me/DogeUserBot >
# Copyright (C) 2021 - DOG-E
# All rights reserved.
#
# This file is a part of < https://github.com/DOG-E/DogeUserBot >
# Please read the GNU Affero General Public License in;
# < https://www.github.com/DOG-E/DogeUserBot/blob/DOGE/LICENSE/ >
# ================================================================


_gzl () {
    local regex
    regex='(https?)://github.com/.+/.+'
    if [[ $UPSTREAM_REPO == "DOGE-EN" ]]
    then
        echo "aHR0cHM6Ly9naXRodWIuY29tL0RPRy1FL0RvZ2VVc2VyQm90L2FyY2hpdmUvRE9HRS1FTi56aXA=" | base64 -d
    elif [[ $UPSTREAM_REPO == "DOGE-TR" ]]
    then
        echo "aHR0cHM6Ly9naXRodWIuY29tL0RPRy1FL0RvZ2VVc2VyQm90L2FyY2hpdmUvRE9HRS1UUi56aXA=" | base64 -d
    elif [[ $UPSTREAM_REPO =~ $regex ]]
    then
        if [[ $UPSTREAM_REPO_BRANCH ]]
        then
            echo "${UPSTREAM_REPO}/archive/${UPSTREAM_REPO_BRANCH}.zip"
        else
            echo "${UPSTREAM_REPO}/archive/DOGE-EN.zip"
        fi
    else
        echo "aHR0cHM6Ly9naXRodWIuY29tL0RPRy1FL0RvZ2VVc2VyQm90L2FyY2hpdmUvRE9HRS1FTi56aXA=" | base64 -d
    fi
}


_grl () {
    local regex
    local rlink
    regex='(https?)://github.com/.+/.+'
    if [[ $UPSTREAM_REPO == "DOGE-EN" ]]
    then
        rlink=`echo "aHR0cHM6Ly9naXRodWIuY29tL0RPRy1FL0RvZ2VVc2VyQm90" | base64 -d`
    elif [[ $UPSTREAM_REPO == "DOGE-TR" ]]
    then
        rlink=`echo "aHR0cHM6Ly9naXRodWIuY29tL0RPRy1FL0RvZ2VVc2VyQm90" | base64 -d`
    elif [[ $UPSTREAM_REPO =~ $regex ]]
    then
        rlink=`echo "${UPSTREAM_REPO}"`
    else
        rlink=`echo "aHR0cHM6Ly9naXRodWIuY29tL0RPRy1FL0RvZ2VVc2VyQm90" | base64 -d`
    fi
    echo "$rlink"
}


_pycode() {
    python3${pVer%.*} -c "$1"
}


_rDogeUserBot() {
    $(_pycode '
from git import Repo
import sys

OFFICIAL_UPSTREAM_REPO = "https://github.com/DOG-E/DogeStarter"
ACTIVE_BRANCH_NAME = "DOGE"

repo = Repo.init()
origin = repo.create_remote("temponame", OFFICIAL_UPSTREAM_REPO)

origin.fetch()
repo.create_head(ACTIVE_BRANCH_NAME, origin.refs[ACTIVE_BRANCH_NAME])
repo.heads[ACTIVE_BRANCH_NAME].checkout(True)
    ')
}


_rwow() {
    local repolink=$(_grl)
    $(_pycode '
from git import Repo
import sys

OFFICIAL_UPSTREAM_REPO="'$repolink'"
ACTIVE_BRANCH_NAME = "'$UPSTREAM_REPO_BRANCH'" or "DOGE-EN"

repo = Repo.init()
origin = repo.create_remote("temponame", OFFICIAL_UPSTREAM_REPO)

origin.fetch()
repo.create_head(ACTIVE_BRANCH_NAME, origin.refs[ACTIVE_BRANCH_NAME])
repo.heads[ACTIVE_BRANCH_NAME].checkout(True)
    ')
}


_dogerun () {
    local zippath
    echo "‚è≥ Downloading setup... üì•"
    zippath="DogeUserBot.zip"
    wget -q $(_gzl) -O "$zippath"
    echo "‚úÖ Done!"

    echo "‚è≥ Unpacking data... üóÉ"
    DOGEBOTPATH=$(zipinfo -1 "$zippath" | grep -v "/.");
    unzip -qq "$zippath"
    echo "‚úÖ Done!"

    echo "‚è≥ Cleaning unnecessary data... üóë"
    rm -rf "$zippath"
    echo "‚úÖ Done!"

    echo "‚è≥ Fetching repository... üîÆ"
    _rDogeUserBot
    echo "‚úÖ Done!"

    echo "‚è≥ Loading... ü¶¥"
    cd $DOGEBOTPATH
    _rwow
    echo "‚úÖ Done!"

    echo "‚è≥ Updating requirements... üì§"
    python3 ../setup/updater.py ../requirements.txt requirements.txt
    chmod -R 755 bin
    echo "‚úÖ Done!"

    python3 -m userbot
}


_dogerun